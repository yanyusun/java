<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns="http://www.springframework.org/schema/beans" xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:c="http://www.springframework.org/schema/c" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <context:component-scan base-package="com.dqys"/>
    <context:annotation-config/>
    <aop:aspectj-autoproxy/>

    <!-- 配置文件 -->
    <context:property-placeholder location="classpath:config.properties"/>

    <!-- 定时任务调度 -->
    <task:annotation-driven scheduler="taskScheduler"/>
    <task:scheduler id="taskScheduler" pool-size="${task.scheduler.pool}"/>

    <!-- 数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:mybatis/mapper/*/**/*.xml"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
    </bean>


    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <property name="nestedTransactionAllowed" value="true"/>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" rollback-for="UnexpectedRollbackException"/>
            <!--<tx:method name="*_tx" rollback-for="Exception" propagation="REQUIRED"/>-->
            <tx:method name="*" rollback-for="Exception" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="txPointCut" expression="execution(* com.dqys.*..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>


    <bean id="dataSourceSale" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url.sale}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean id="sqlSessionFactorySale" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceSale" />
        <property name="mapperLocations" value="classpath*:mybatis/mapper/*/**/*.xml"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
    </bean>


    <!-- 配置事务管理器 -->
    <bean id="transactionManagerSale" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceSale" />
        <property name="nestedTransactionAllowed" value="true"/>
    </bean>
    <tx:advice id="txAdviceSale" transaction-manager="transactionManagerSale">
        <tx:attributes>
            <tx:method name="get*" read-only="true" rollback-for="UnexpectedRollbackException"/>
            <tx:method name="*_tx" rollback-for="Exception" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="txPointCut" expression="execution(* com.dqys.*..*(..))"/>
        <aop:advisor advice-ref="txAdviceSale" pointcut-ref="txPointCut"/>
    </aop:config>



    <!-- 映射扫描 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dqys.persistent"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- redis -->
    <!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="clusterConfig">
            <bean class="org.springframework.data.redis.connection.RedisClusterConfiguration">
                <property name="clusterNodes">
                    <set>
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port0}" />
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port1}" />
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port2}" />
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port3}" />
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port4}" />
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port5}" />
                    </set>
                </property>
            </bean>
        </constructor-arg>
        <property name="timeout" value="${redis.cluster.timeout}"></property>
        <property name="usePool" value="${redis.cluster.user_pool}"></property>
    </bean>-->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${redis.host}" p:port="${redis.port}" p:usePool="${redis.user_pool}"
          p:password="${redis.password}">
    </bean>
    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer">
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="jedisConnectionFactory">
        <property name="enableTransactionSupport" value="false"/>
        <!-- 键为字符串 -->
        <!--<property name="keySerializer" ref="stringRedisSerializer" />-->
    </bean>
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
          p:connectionFactory-ref="jedisConnectionFactory">
        <property name="enableTransactionSupport" value="false"/>
    </bean>

    <!-- message/pubsub -->
    <!--<bean id="msgConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.msg.host}" />
        <property name="port" value="${redis.msg.port}" />
        <property name="usePool" value="${redis.msg.user_pool}" />
        <property name="password" value="${redis.msg.password}" />
    </bean>
    <bean id="msgRedisListener" class="com.dqys.core.utils.EmailClientTool" />
    <bean id="msgRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="msgConnectionFactory" p:enableTransactionSupport="false" />
    <bean id="msgRedisContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
        <property name="connectionFactory" ref="msgConnectionFactory" />
        <property name="messageListeners">
            <map>
                <entry key-ref="msgRedisListener">
                    <bean class="org.springframework.data.redis.listener.ChannelTopic">
                        <constructor-arg value="mail" />
                    </bean>
                </entry>
            </map>
        </property>
    </bean>-->

    <!--<bean id="redisClusterConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="clusterConfig">
            <bean class="org.springframework.data.redis.connection.RedisClusterConfiguration">
                <property name="clusterNodes">
                    <set>
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port0}" />
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port1}" />
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port2}" />
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port3}" />
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port4}" />
                        <bean class="org.springframework.data.redis.connection.RedisNode" c:host="${redis.cluster.host}" c:port="${redis.cluster.port5}" />
                    </set>
                </property>
            </bean>
        </constructor-arg>
        <property name="timeout" value="${redis.cluster.timeout}"></property>
        <property name="usePool" value="${redis.cluster.user_pool}"></property>
    </bean>
    <bean id="redisClusterTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="redisClusterConnectionFactory" p:enableTransactionSupport="false" />-->

    <!-- 缓存 -->
    <cache:annotation-driven/>
    <bean id="cacheJedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${redis.cache.host}" p:port="${redis.cache.port}" p:usePool="${redis.cache.use_pool}"
          p:password="${redis.cache.password}">
    </bean>
    <bean id="cacheRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="cacheJedisConnectionFactory">
    </bean>
    <!--<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"
          c:redisOperations-ref="cacheRedisTemplate"/>-->


    <!-- 自定义CacheManager，实现缓存有效期可配置 -->
    <bean name="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="cacheRedisTemplate"/>
        <constructor-arg name="cacheNames">
            <set>
                <value>sys_notice_cache</value>
            </set>
        </constructor-arg>
        <!-- 缓存有效期-->
        <property name="expires">
            <map>
                <entry key="sys_notice_cache" value="86400"/>
            </map>
        </property>
    </bean>
    <rabbit:annotation-driven/>

    <!-- rabbitmq -->
    <bean id="rabbitConnectionFactory"
          class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
        <constructor-arg name="hostname" value="${rabbitmq.host}"/>
        <constructor-arg name="port" value="${rabbitmq.port}"/>
        <property name="username" value="${rabbitmq.username}"/>
        <property name="password" value="${rabbitmq.password}"/>
        <property name="channelCacheSize" value="${rabbitmq.channel.size}"/>
        <property name="publisherConfirms" value="true"/>
        <property name="publisherReturns" value="true"/>
    </bean>
    <bean id="rabbitRetryTemplate" class="org.springframework.retry.support.RetryTemplate">
        <property name="backOffPolicy">
            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                <property name="initialInterval" value="10"/>
                <property name="maxInterval" value="1000"/>
                <property name="multiplier" value="10.0"/>
            </bean>
        </property>
    </bean>
    <bean id="rabbitTemplate" class="org.springframework.amqp.rabbit.core.RabbitTemplate">
        <property name="connectionFactory" ref="rabbitConnectionFactory"/>
        <property name="retryTemplate" ref="rabbitRetryTemplate"/>
        <property name="mandatory" value="true"/>
    </bean>
    <!-- 邮件确认队列 -->
    <rabbit:queue name="mail_send_queue_online" durable="true"/>
    <rabbit:direct-exchange name="mailExchange" durable="true">
        <rabbit:bindings>
            <rabbit:binding key="mail_online_route" queue="mail_send_queue_online"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!-- 短信队列 -->
    <rabbit:queue name="sms_send_queue_online" durable="true"/>
    <rabbit:direct-exchange name="smsExchange" durable="true">
        <rabbit:bindings>
            <rabbit:binding key="sms_online_route" queue="sms_send_queue_online"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!--更进信息队列-->
    <rabbit:queue name="follow_message_online" durable="true"/>
    <rabbit:direct-exchange name="followMessageExchange" durable="true">
        <rabbit:bindings>
            <rabbit:binding key="fm_online_route" queue="follow_message_online"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>


    <!--<rabbit:listener-container connection-factory="rabbitConnectionFactory">
        <rabbit:listener ref="mailClient" method="sendMailFromMessage" queue-names="mail_send_queue" />
    </rabbit:listener-container>
    <bean id="mailClient" class="com.dqys.core.utils.EmailClientTool" />-->


    <!--<rabbit:connection-factory id="rabbitConnectionFactory"></rabbit:connection-factory>-->
    <!--<rabbit:template id="rabbitTemplate" connection-factory="rabbitConnectionFactory"  />-->
    <!--<rabbit:queue name="myQueue" />
    <rabbit:topic-exchange name="myExchange">
        <rabbit:bindings>
            <rabbit:binding pattern="foo.*" queue="myQueue"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <rabbit:queue name="myQueue2" />
    <rabbit:topic-exchange name="myExchange2">
        <rabbit:bindings>
            <rabbit:binding pattern="test.*" queue="myQueue2"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:topic-exchange>-->


    <!--
    <rabbit:listener-container connection-factory="rabbitConnectionFactory">
        <rabbit:listener ref="rabbitClinet" method="listen" queue-names="myQueue" />
    </rabbit:listener-container>
    <bean id="rabbitClient" class="com.dqys.core.utils.RabbitMQClientTool" />-->


    <!--<rabbit:template id="amqpTemplate" connection-factory="rabbitConnectionFactory"/>

    <rabbit:admin connection-factory="rabbitConnectionFactory"/>

    <rabbit:queue name="myqueue"/>

    <bean id="foo" class="com.dqys.core.utils.RabbitMQConsumerTool" />-->


    <!--<rabbit:template id="rabbitTemplate" connection-factory="rabbitConnectionFactory" exchange="myExchange" routing-key="foo.bar" />
    <rabbit:admin connection-factory="rabbitConnectionFactory" />
    <rabbit:queue name="myQueue" />
    <rabbit:direct-exchange name="myExchange">
        <rabbit:bindings>
            <rabbit:binding queue="myQueue"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>
    <rabbit:listener-container connection-factory="rabbitConnectionFactory">
        <rabbit:listener ref="rabbitClinet" method="listen" queue-names="myQueue" />
    </rabbit:listener-container>
    <bean id="rabbitClinet" class="com.dqys.core.utils.RabbitMQConsumerTool" />-->

    <!--<bean id="rabbitTemplate" class="org.springframework.amqp.rabbit.core.RabbitTemplate">
        <property name="connectionFactory" ref="rabbitConnectionFactory" />
        <property name="exchange" value="myExchange" />
        <property name="routingKey" value="myRoute" />
        <property name="queue" value="myQueue" />
    </bean>-->
    <!--
    <rabbit:template id="rabbitTemplate" mandatory="true" connection-factory="rabbitConnectionFactory" retry-template="rabbitRetryTemplate" />

    <bean id="rabbitListenerContainerFactory"
          class="org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory">
        <property name="connectionFactory" ref="rabbitConnectionFactory"/>
        <property name="concurrentConsumers" value="3"/>
        <property name="maxConcurrentConsumers" value="10"/>
    </bean>

    <bean id="rabbitTxManager"
          class="org.springframework.amqp.rabbit.transaction.RabbitTransactionManager">
        <property name="connectionFactory" ref="rabbitConnectionFactory"/>
    </bean>-->
    <bean id="rabbitListenerContainerFactory"
          class="org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory">
        <property name="connectionFactory" ref="rabbitConnectionFactory"/>
        <property name="concurrentConsumers" value="3"/>
        <property name="maxConcurrentConsumers" value="10"/>
    </bean>

</beans>